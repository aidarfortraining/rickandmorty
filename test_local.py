#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
"""
import os
import sys
import subprocess
import django
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Django settings
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rick_and_morty_app.settings')

def run_command(command, description, timeout=30):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    print(f"üß™ {description}...")
    try:
        if isinstance(command, str):
            result = subprocess.run(
                command, shell=True, check=True, 
                capture_output=True, text=True, timeout=timeout
            )
        else:
            result = subprocess.run(
                command, check=True, 
                capture_output=True, text=True, timeout=timeout
            )
        
        print(f"‚úÖ {description} - OK")
        return True, result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - FAILED: {e}")
        print(f"   Error output: {e.stderr}")
        return False, e.stderr
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} - TIMEOUT")
        return False, "Timeout"

def test_django_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É Django"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django...")
    try:
        django.setup()
        from django.conf import settings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"   DEBUG: {settings.DEBUG}")
        print(f"   Database: {settings.DATABASES['default']['ENGINE']}")
        print(f"   Database path: {settings.DATABASES['default']['NAME']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ middleware –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
        middleware_active = 'main.middleware.DatabaseInitMiddleware' in settings.MIDDLEWARE
        print(f"   Production middleware: {'Active' if middleware_active else 'Inactive'}")
        
        if not settings.DEBUG and not middleware_active:
            print("‚ö†Ô∏è  WARNING: DEBUG=False but production middleware not active")
        
        print("‚úÖ Django setup - OK")
        return True
    except Exception as e:
        print(f"‚ùå Django setup - FAILED: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from django.db import connection
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            print("   ‚úÖ Database connection - OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        with connection.cursor() as cursor:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [table[0] for table in cursor.fetchall()]
            
            expected_tables = ['main_character', 'main_episode', 'main_location']
            missing_tables = [t for t in expected_tables if t not in tables]
            
            if missing_tables:
                print(f"   ‚ö†Ô∏è  Missing tables: {missing_tables}")
                print("   üí° Run: python manage.py migrate")
                return False
            else:
                print(f"   ‚úÖ All tables present ({len(tables)} total)")
        
        return True
    except Exception as e:
        print(f"‚ùå Database test - FAILED: {e}")
        return False

def test_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ Django"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    try:
        from main.models import Character, Episode, Location
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        char_count = Character.objects.count()
        episode_count = Episode.objects.count()
        location_count = Location.objects.count()
        
        print(f"   Characters: {char_count}")
        print(f"   Episodes: {episode_count}")
        print(f"   Locations: {location_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
        if char_count > 0:
            char = Character.objects.first()
            print(f"   Sample character: {char.name}")
        
        print("‚úÖ Models test - OK")
        return True
    except Exception as e:
        print(f"‚ùå Models test - FAILED: {e}")
        return False

def test_services():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    try:
        from main.services import api_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å–µ—Ä–≤–∏—Å
        api_data = api_service.get_character(1)
        if api_data and 'name' in api_data:
            print(f"   ‚úÖ API service - OK (Got: {api_data['name']})")
        else:
            print("   ‚ö†Ô∏è  API service - API may be down, but service works")
        
        return True
    except Exception as e:
        print(f"‚ùå Services test - FAILED: {e}")
        return False

def test_views():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç views"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ views...")
    try:
        from django.test import Client
        from django.urls import reverse
        
        client = Client()
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = client.get('/')
        if response.status_code == 200:
            print("   ‚úÖ Home page - OK")
        else:
            print(f"   ‚ùå Home page - FAILED ({response.status_code})")
            return False
        
        # –¢–µ—Å—Ç health check
        response = client.get('/health/')
        if response.status_code == 200:
            print("   ‚úÖ Health check - OK")
        else:
            print(f"   ‚ùå Health check - FAILED ({response.status_code})")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        response = client.get('/search/?q=Rick&type=character')
        if response.status_code == 200:
            print("   ‚úÖ Search page - OK")
        else:
            print(f"   ‚ùå Search page - FAILED ({response.status_code})")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Views test - FAILED: {e}")
        return False

def test_static_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã"""
    print("üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    try:
        from django.contrib.staticfiles import finders
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        css_file = finders.find('css/style.css')
        js_file = finders.find('js/main.js')
        
        if css_file:
            print("   ‚úÖ CSS file found")
        else:
            print("   ‚ùå CSS file not found")
            return False
        
        if js_file:
            print("   ‚úÖ JS file found")
        else:
            print("   ‚ùå JS file not found")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Static files test - FAILED: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ Rick and Morty Local Testing Suite")
    print("=" * 50)
    
    tests = [
        ("Django Setup", test_django_setup),
        ("Database", test_database),
        ("Models", test_models),
        ("Services", test_services),
        ("Views", test_views),
        ("Static Files", test_static_files),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        success = test_func()
        results.append((test_name, success))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{test_name:<20} {status}")
        if success:
            passed += 1
    
    print(f"\nüìä –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   - python manage.py migrate")
        print("   - python manage.py collectstatic")
        print("   - python manage.py sync_data --limit 1")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
