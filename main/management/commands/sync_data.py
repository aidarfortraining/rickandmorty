from django.core.management.base import BaseCommand, CommandError
from main.services import api_service, sync_service
from main.models import Character, Episode, Location
import time


class Command(BaseCommand):
    help = '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Rick and Morty API'

    def add_arguments(self, parser):
        parser.add_argument(
            '--characters',
            action='store_true',
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
        )
        parser.add_argument(
            '--episodes',
            action='store_true',
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç–ø–∏–∑–æ–¥—ã',
        )
        parser.add_argument(
            '--locations',
            action='store_true',
            help='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞—Ü–∏–∏',
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=5,
            help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)',
        )

    def handle(self, *args, **options):
        limit = options['limit']
        
        if not any([options['characters'], options['episodes'], options['locations']]):
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å–µ
            self.sync_characters(limit)
            self.sync_episodes(limit)
            self.sync_locations(limit)
        else:
            if options['characters']:
                self.sync_characters(limit)
            if options['episodes']:
                self.sync_episodes(limit)
            if options['locations']:
                self.sync_locations(limit)

        self.stdout.write(
            self.style.SUCCESS('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )

    def sync_characters(self, limit):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        self.stdout.write('üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...')
        
        page = 1
        synced_count = 0
        
        while page <= limit:
            self.stdout.write(f'üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...')
            
            api_data = api_service.get_characters(page=page)
            if not api_data or 'results' not in api_data:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}')
                )
                break
                
            for char_data in api_data['results']:
                try:
                    if not isinstance(char_data, dict) or 'id' not in char_data:
                        self.stdout.write(
                            self.style.WARNING(f'‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {char_data}')
                        )
                        continue
                        
                    character = sync_service.sync_character(char_data)
                    synced_count += 1
                    self.stdout.write(f'‚úÖ {character.name}')
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {char_data.get("name", "Unknown")}: {e}')
                    )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if not api_data.get('info', {}).get('next'):
                break
                
            page += 1
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π')
        )

    def sync_episodes(self, limit):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —ç–ø–∏–∑–æ–¥—ã"""
        self.stdout.write('üì∫ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —ç–ø–∏–∑–æ–¥–æ–≤...')
        
        page = 1
        synced_count = 0
        
        while page <= limit:
            self.stdout.write(f'üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...')
            
            api_data = api_service.get_episodes(page=page)
            if not api_data or 'results' not in api_data:
                break
                
            for episode_data in api_data['results']:
                try:
                    if not isinstance(episode_data, dict) or 'id' not in episode_data:
                        self.stdout.write(
                            self.style.WARNING(f'‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —ç–ø–∏–∑–æ–¥: {episode_data}')
                        )
                        continue
                        
                    episode = sync_service.sync_episode(episode_data)
                    synced_count += 1
                    self.stdout.write(f'‚úÖ {episode.name}')
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {episode_data.get("name", "Unknown")}: {e}')
                    )
            
            if not api_data.get('info', {}).get('next'):
                break
                
            page += 1
            time.sleep(0.5)
            
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} —ç–ø–∏–∑–æ–¥–æ–≤')
        )

    def sync_locations(self, limit):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ª–æ–∫–∞—Ü–∏–∏"""
        self.stdout.write('üåç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π...')
        
        page = 1
        synced_count = 0
        
        while page <= limit:
            self.stdout.write(f'üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...')
            
            api_data = api_service.get_locations(page=page)
            if not api_data or 'results' not in api_data:
                break
                
            for location_data in api_data['results']:
                try:
                    if not isinstance(location_data, dict) or 'id' not in location_data:
                        self.stdout.write(
                            self.style.WARNING(f'‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: {location_data}')
                        )
                        continue
                        
                    location = sync_service.sync_location(location_data)
                    synced_count += 1
                    self.stdout.write(f'‚úÖ {location.name}')
                except Exception as e:
                    self.stdout.write(
                        self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {location_data.get("name", "Unknown")}: {e}')
                    )
            
            if not api_data.get('info', {}).get('next'):
                break
                
            page += 1
            time.sleep(0.5)
            
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –ª–æ–∫–∞—Ü–∏–π')
        )

